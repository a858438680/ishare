def execQ16(spark: SparkSession): Unit = {

  val supplier_cnt = new Count

  val ps = DataUtils.loadStreamTable(spark, "partsupp", "ps", tpchSchema)

  val p = DataUtils.loadStreamTable(spark, "part", "part", tpchSchema)
    .filter(($"p_brand" =!= "Brand#45") and ($"p_size" isin (49, 15, 9)))

  val rawS = DataUtils.loadStreamTable(spark, "supplier", "s", tpchSchema)
    .filter($"s_comment" like ("%Customer%Complaints%"))

  val s = rawS
    .select($"s_suppkey")

  return ps
    .join(p, $"ps_partkey" === $"p_partkey")
    .join(s, $"ps_suppkey" === $"s_suppkey", "left_anti")
    .select($"p_brand", $"p_type", $"p_size", $"ps_suppkey")
    .groupBy($"p_brand", $"p_type", $"p_size")
    .agg(
        supplier_cnt($"ps_suppkey").as("supplier_cnt"))
}
