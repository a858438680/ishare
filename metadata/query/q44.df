def execQ44(spark: SparkSession): Unit = {

  val doubleAvg = new DoubleAvg
  val numcust = new Count
  val doubleSum = new DoubleSum

  val c = DataUtils.loadStreamTable(spark, "customer", "c", tpchSchema)
    .filter(($"c_acctbal" > 0.0) and (substring($"c_phone", 1, 2) isin ("14", "31")))

  val o = DataUtils.loadStreamTable(spark, "orders", "o", tpchSchema)

  val c1Raw = DataUtils.loadStreamTable(spark, "customer", "c1", tpchSchema)
    .filter(($"c_acctbal" > 0.0) and (substring($"c_phone", 1, 2) isin ("14", "31")))

  val subquery1 = c1Raw
    .agg(
        doubleAvg($"c_acctbal").as("avg_acctbal"))

  return c
    .join(o, $"c_custkey" === $"o_custkey", "left_anti")
    .join(subquery1, $"c_acctbal" > $"avg_acctbal", "cross")
    .select(substring($"c_phone", 1, 2).as("cntrycode"), $"c_acctbal")
    .groupBy($"cntrycode")
    .agg(
        numcust(lit(1L)).as("numcust"),
        doubleSum($"c_acctbal").as("totalacctbal"))
}
